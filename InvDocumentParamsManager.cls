<?
import('DocumentParamsManager');

define('BUILD_KIT', 'Build Kits');
define('DIS_KIT', 'Disassemble Kits');

/**
 * Class InvDocumentParamsManager
 */
class InvDocumentParamsManager extends DocumentParamsManager
{
    /**
     * @param array $params
     */
    public function __construct($params = array())
    {
        global $kINVid;
        $params['_mod'] = 'inv';
        $params['_modID'] = $kINVid;
        $params['docclass'] = 'I';
        parent::__construct($params);
    }


    /**
     * @param array $values
     *
     * @return bool
     */
    protected function regularAdd(&$values)
    {
        $values['SALE_PUR_TRANS'] = 'Internal';
        $values['CUST_VEND'] = 'Warehouse';
        $this->prepValuesForREST($values);
        return DocumentParamsManager::regularAdd($values);
    }

    /**
     * @param array $values
     *
     * @return bool
     */
    protected function regularSet(&$values)
    {
        $values['SALE_PUR_TRANS'] = 'Internal';
        $values['CUST_VEND'] = 'Warehouse';
        $this->prepValuesForREST($values);
        return DocumentParamsManager::regularSet($values);
    }

    /**
     * Returns the transaction definition structure for the given id
     * ($docparkey)
     *
     * @param string $docparkey
     * @param string[]|null $fields
     *
     * @return array|false
     */
    public function get($docparkey, $fields = null)
    {
        $values = parent::get($docparkey, $fields);
        foreach ($values['DOCPAR_ENTITY_PROPS'] as &$docParEntity) {
            if ((isset($docParEntity['XSLTEMPLATE']) && $docParEntity['XSLTEMPLATE'] !== '')
                && (!isset($docParEntity['XSLTEMPLATEDESCRIPTION']) || $docParEntity['XSLTEMPLATEDESCRIPTION'] == '')) {
                // when system created XSL is assigned to docpar the entity file is not populating the XSLTEMPLATEDESCRIPTION
                // so getting Description (i.e. template name) from XSLTEMPLATE and populating XSLTEMPLATEDESCRIPTION
                $XslformatMgr = Globals::$g->gManagerFactory->getManager('xslformat');
                $formatdata = $XslformatMgr->DoQuery('QRY_XSLFORMAT_SELECT_RAW_FROM_RECORDNO', array($docParEntity['XSLTEMPLATE'], $this->_cny));
                $docParEntity['XSLTEMPLATEDESCRIPTION'] = $formatdata[0]['DESCRIPTION'];
            }
        }
        return $values;
    }

/*
    protected function prepareEntityValues(&$values)
    {
        $this->prepUpdatesGL($values);
        return parent::prepareEntityValues($values); // TODO: Change the autogenerated stub
    }

    private function prepUpdatesGL(&$values)
    {
        if (in_array($values['DOCID'], array(BUILD_KIT, DIS_KIT, ICTransferManager::INDOCTYPE, ICTransferManager::OUTDOCTYPE))) {
            $updatesGL = 'N';

            foreach ($values['DOCPAR_TOTALS'] as $tKey => $total) {
                if ($total['TOTALID'] == 'ONHAND' && in_array($total['Q_QV'], array('Value', 'Quantity & Value'))) {
                    $updatesGL = 'G';
                }
                $values['UPDATES_GL'] = $updatesGL;
            }
        }
    }
*/

    /**
     * @param array $values
     *
     * @return bool
     */
    public function isDocParUpdatesGL($values) 
    {
        return $this->_isDocParUpdatesGL($values);
    }

    /**
     * @param array $values
     *
     * @return bool
     */
    protected function _isDocParUpdatesGL($values) 
    {
        $updatesGL = false;
        if (($values['SHOW_TOTALS'] == 'true') && ($values['UPDATES_INV'] == 'Value' || $values['UPDATES_INV'] == 'Quantity and Value')) {
            $updatesGL = true;
        }
        return $updatesGL;
    }

    /**
     * @param   array     $offsetAccts
     * @param   string    $option
     *
     * @return array
     */
    public function GetAccountForGLPosting($offsetAccts, $option = '') 
    {
        return $offsetAccts['INVACCTKEY'];
    }

    /**
     * @param string[]  &$offsetAccts
     * @param string    $option
     *
     * @return string|null
     */
    public function GetOffsetAccountForPosting(&$offsetAccts, $option = '')
    {

        if ($option == '') {
            return parent::GetOffsetAccountForPosting($offsetAccts);
        } else {
            // For Damanged and Scrap always take from the setup 
            GetModulePreferences($this->_modID, $prefs);
            if ($option == 'SCRAP') {
                return $prefs['SCRAP_GLACCOUNT'];
            } else if ($option == 'DAMAGE') {
                return $prefs['DAM_GLACCOUNT'];
            } else {
                return null;
            }
        }

    }

    /**
     * @param array $offsetAccts
     * @param array $itemGLGrp
     *
     * @return bool
     */
    public function SetDocParPostingOffsetAccounts($offsetAccts, $itemGLGrp = array()) 
    {
        $ok = true;
        global $gManagerFactory, $gErr;

        $params['selects'] = array("docid", "docclass", "recordno","sale_pur_trans","updates_inv","in_out");
        $params['filters'] = array (
        array (
        array('latestversionkey','IS NULL'),
        array('status','=', 'T'),
        array('UPDATES_INV', 'IN', array('Value','Quantity and Value')),
        ),
        );

        $docpars = $this->GetList($params);

        $postingAccount = $this->GetAccountForGLPosting($offsetAccts);
        $offsetAccount = $this->GetOffsetAccountForPosting($offsetAccts);

        $offsetRefMgr = $gManagerFactory->getManager('invdocumentparinvgl');

        foreach ( $docpars as $docpar) {

            if ($docpar["IN_OUT"] == 'Increase') {
                $offsetAccts['POSTING_SIGN'] = 'Debit';
                $offsetAccts['OFFSET_SIGN'] = 'Credit';
            } else {
                $offsetAccts['POSTING_SIGN'] = 'Credit';
                $offsetAccts['OFFSET_SIGN'] = 'Debit';
            }

            if ($docpar['DOCID'] == 'Inventory Scrap or Spoilage') {
                $offsetAccts['OFF_GLACCOUNT'] = $this->GetOffsetAccountForPosting($offsetAccts, 'SCRAP');
            } else if ($docpar['DOCID'] == 'Inventory Damaged Goods') {
                $offsetAccts['OFF_GLACCOUNT'] = $this->GetOffsetAccountForPosting($offsetAccts, 'DAMAGE');
            } else {
                $offsetAccts['OFF_GLACCOUNT'] = $offsetAccount;
            }
            $offsetAccts['POSTING_GLACCOUNT'] = $postingAccount;

            $ok = $ok && $offsetRefMgr->RecreateItemGrpValues($docpar, $offsetAccts, $itemGLGrp);
        }
        //dieFL();
        if (!$ok) {
            $msg = "Cannot set the document params offset details ";
            $gErr->addIAError('INV-0685', __FILE__ . ':' . __LINE__,
                $msg,
                []
            );
        }

        return $ok;
    }

    /**
     * Implements the validation of the entity responding to the API call.
     *
     * @param array $values
     *
     * @return bool
     */
    function API_ValidateEntity(&$values)
    {
        // First check if the entity is authorized for API calls
        $ok = parent::API_Validate(API_READ);

        // Populate all the defaults
        $ok = $ok && $this->prepareEntityValues($values);

        // Create a validator and run validation
        $validator = DocumentParamsValidatorFactory::create($this, null);
        $ok = $ok && $validator->validate($values);
        if (!$ok) {
            global $gErr;
            $msg = "Validation is failed on the entity of a given type -> " . $this->_entity;
            $gErr->addIAError('INV-0686', __FILE__ . ':' . __LINE__, $msg,
            ['ENTITY'=>$this->_entity]);
        }
        return $ok;
    }


    /**
     * @param $values
     * @return void
     */
    private function prepValuesForREST(&$values)
    {
        foreach ($values['DOCPAR_SUBTOTAL'] as &$invdocParSubtotal) {
            if (isset($invdocParSubtotal['GLACCTID']) && $invdocParSubtotal['GLACCTID'] !== '') {
                $invdocParSubtotal['GLACCOUNT'] = $invdocParSubtotal['GLACCTID'];
            }
            if (isset($invdocParSubtotal['GLOFFSETACCTID']) && $invdocParSubtotal['GLOFFSETACCTID'] !== '') {
                $invdocParSubtotal['GLOFFSETACCOUNT'] = $invdocParSubtotal['GLOFFSETACCTID'];
            }
        }
        foreach ( $values['DOCPAR_INVGL'] as &$docParInvGL ) {
            if ( isset($docParInvGL['GLACCTNUMBER']) && $docParInvGL['GLACCTNUMBER'] !== '' ) {
                $docParInvGL['GLACCOUNT'] = $docParInvGL['GLACCTNUMBER'];
            }
        }
        foreach ( $values['DOCPAR_ENTITY_PROPS'] as &$docParEntity ) {
            if ( isset($docParEntity['ENTITY_LOCATION_NO']) && $docParEntity['ENTITY_LOCATION_NO'] !== '' ) {
                $docParEntity['ENTITY_NAME'] = $docParEntity['ENTITY_LOCATION_NO'];
            }
        }

    }
}
